const text = require('./text')
const { isCommitter } = require('./coreCommitters')
const { translate } = require('./translator')

class Issue {
  constructor (context) {
    this.context = context
    this.issue = context.payload.issue
    this.title = this.issue.title
    this.body = this.issue.body
    this.translatedTitle = null
    this.translatedBody = null
    this.issueType = null
    this.response = null
    this.addLabels = []
    this.removeLabel = null
  }

  async init () {
    // if author is committer, do not check if using template
    const isCore = isCommitter(this.issue.author_association, this.issue.user.login)
    if (isCore || this.isUsingTemplate()) {
      if (this._contain('Steps to reproduce')) {
        this.issueType = 'bug'
      } else if (this._contain('What problem does this feature solve')) {
        this.issueType = 'new-feature'
      } else if (!isCore) {
        this.response = text.NOT_USING_TEMPLATE
        return
      }

      // translate issue
      await this._translate()

      this._computeResponse()
    } else {
      this.response = text.NOT_USING_TEMPLATE
      this.addLabels.push('invalid')
    }
  }

  async _translate () {
    let res = await translate(this.title)
    if (res && res.lang !== 'en') {
      this.translatedTitle = [res.translated, res.lang]
    }
    res = await translate(this.body)
    if (res && res.lang !== 'en') {
      this.translatedBody = [res.translated, res.lang]
    }
  }

  isUsingTemplate () {
    return this.body.indexOf('generated by echarts-issue-helper') > -1
  }

  _computeResponse () {
    switch (this.context.payload.action) {
      case 'opened':
      case 'reopened':
        this.response = text.ISSUE_CREATED
        break
      case 'edited':
        this.response = text.ISSUE_UPDATED
        this.removeLabel = 'waiting-for: help'
        break
    }

    this.addLabels.push('waiting-for: community')
    this.addLabels.push('pending')
    this.addLabels.push(this.issueType)

    const isInEnglish = this._contain('This issue is in English')
    if (isInEnglish || (!this.translatedTitle && !this.translatedBody)) {
      this.addLabels.push('en')
    }
  }

  _contain (txt) {
    return this.body.indexOf(txt) > -1
  }
}

module.exports = Issue
